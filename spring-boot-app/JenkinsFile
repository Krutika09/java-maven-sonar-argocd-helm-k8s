pipeline {
  agent any  // Run on Jenkins host where Docker is installed

  stages {

    stage('Checkout') {
      steps {
        sh 'echo "Code checked out"'
        sh 'echo "=== WORKSPACE CONTENT ===" && ls -R'
      }
    }

    stage('Build and Test') {
      steps {
        script {
          def pomPath = 'pom.xml'
          if (!fileExists(pomPath)) {
            sh 'echo "Contents of workspace:" && ls -R'
            error "ERROR: ${pomPath} not found. Please check your repo structure."
          }
        }

        dir('.') {
          sh 'mvn clean package'
        }
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://44.249.107.76:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          dir('.') {
            sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL'
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
          script {
            sh """
              cd .
              docker build -t ${DOCKER_IMAGE} .
              echo $PASSWORD | docker login -u $USERNAME --password-stdin
              docker push ${DOCKER_IMAGE}
            """
          }
        }
      }
    }

    stage('Check Docker') {
      steps {
        sh 'docker version'
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "iam-veeramalla"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "abhishek.xyz@gmail.com"
            git config user.name "Abhishek Veeramalla"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" ../spring-boot-app-manifests/deployment.yml
            git add ../spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }

  } // stages
}
